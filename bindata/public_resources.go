// +build embed

//Generated by github.com/omeid/go-resources
package main

import (
	"bytes"
	"errors"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

var Assets http.FileSystem

// http.FileSystem implementation.
type FileSystem struct {
	files map[string]File
}

func (fs *FileSystem) Open(name string) (http.File, error) {
	if filepath.Separator != '/' && strings.IndexRune(name, filepath.Separator) >= 0 ||
		strings.Contains(name, "\x00") {
		return nil, errors.New("http: invalid character in file path")
	}
	file, ok := fs.files[name]
	if !ok {
		files := []os.FileInfo{}
		for path, file := range fs.files {
			if strings.HasPrefix(path, name) {
				fi := file.fi
				files = append(files, &fi)
			}
		}

		if len(files) == 0 {
			return nil, os.ErrNotExist
		}

		//We have a directory.
		return &File{
			fi: FileInfo{
				isDir: true,
				files: files,
			}}, nil
	}
	file.Reader = bytes.NewReader(file.data)
	return &file, nil
}

type File struct {
	*bytes.Reader
	data []byte
	fi   FileInfo
}

// A noop-closer.
func (f *File) Close() error {
	return nil
}

func (f *File) Readdir(count int) ([]os.FileInfo, error) {
	return nil, os.ErrNotExist
}

func (f *File) Stat() (os.FileInfo, error) {
	return &f.fi, nil
}

type FileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
	isDir   bool
	sys     interface{}

	files []os.FileInfo
}

func (f *FileInfo) Name() string {
	return f.name
}
func (f *FileInfo) Size() int64 {
	return f.size
}

func (f *FileInfo) Mode() os.FileMode {
	return f.mode
}

func (f *FileInfo) ModTime() time.Time {
	return f.modTime
}

func (f *FileInfo) IsDir() bool {
	return f.isDir
}

func (f *FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return f.files, nil
}

func (f *FileInfo) Sys() interface{} {
	return f.sys
}

func init() {
	Assets = &FileSystem{
		files: map[string]File{
			"/application.js": File{
				data: []byte{
					0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x67, 0x28,
					0x22, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64,
					0x22, 0x29, 0x3b,
				},
				fi: FileInfo{
					name:    "application.js",
					size:    27,
					modTime: time.Unix(1460861590, 1460861590000000000),
					isDir:   false,
				},
			}, "/css": File{
				data: []byte{},
				fi: FileInfo{
					name:    "css",
					size:    102,
					modTime: time.Unix(1460859657, 1460859657000000000),
					isDir:   true,
				},
			}, "/css/style.css": File{
				data: []byte{
					0x62, 0x6f, 0x64, 0x79, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x62,
					0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f,
					0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
					0x3b, 0x0a, 0x7d,
				},
				fi: FileInfo{
					name:    "style.css",
					size:    39,
					modTime: time.Unix(1460855764, 1460855764000000000),
					isDir:   false,
				},
			}, "/js": File{
				data: []byte{},
				fi: FileInfo{
					name:    "js",
					size:    102,
					modTime: time.Unix(1460861793, 1460861793000000000),
					isDir:   true,
				},
			}, "/js/hello.js": File{
				data: []byte{
					0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x67, 0x28,
					0x22, 0x6f, 0x6b, 0x22, 0x29, 0x3b,
				},
				fi: FileInfo{
					name:    "hello.js",
					size:    18,
					modTime: time.Unix(1460862043, 1460862043000000000),
					isDir:   false,
				},
			},
		},
	}
}
